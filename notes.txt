DOM Manipulation using JavaScript Notes:-

1. What is DOM

2. What is nodes and types of nodes

3. Selecting elements using DOM
    1.getElementById()
    2.getElementByClassName()
    3.getElementByTagName()
    4.getElementByName()
    5. querySelector() and querySelectorAll()

4. Traversing elements
    1. Selecting parent element
    2. Selecting child  element
    3. Selecting sibling element

5. Manipulating HTML element
    1. createElement()
    2. appendChild()
    3. textContext
    4. innerHTML
    5. after()
    6. append()
    7. prepand()
    8. insertAdjacentHTML()
    9. replaceChild()
    10. cloneNode()
    11. removeChild()
    12. insertBefore()

6. Attribute methods
    1. getAttribute()
    2. setAttribute()
    3. hasAttribute()
    4. hasAttributes()
    5. removeAttribute()

7. Manipulating Element's stylesheet
    1.style property
    2.cssText
    3.getComputedStyle()
    4. className property
    5. classList property

8. JavaScript Events
    1. What is Events
    2. Event Bubbling & Event Capturing
    3. Event Handler Attributes
    4. DOM Level 0 event handlers
    5. addEventListener()
    6. Event Objects
    7. Different types of Event


*****   Explaination with Example:-



*DOMContentLoaded:

This is commonly used to ensure that your JavaScript code runs after the DOM elements are available,
preventing issues such as trying to access elements before they exist in the DOM.

document.addEventListener('DOMContentLoaded', function() {
    // DOM manipulation code goes here
});


3. Selecting elements using DOM

    1.  getElementById(): This method is used to select an element by its unique ID attribute.

        eg: <div id="myDiv">This is a div element with ID 'myDiv'.</div>

            <script>
                // Selecting the element with ID 'myDiv'
                let element = document.getElementById("myDiv");
                console.log(element);
            </script>

        Note : Any id should be unique, but if two or more elements with the same id exist, getElementById() returns the first.

    2.  getElementByClassName() : getElementsByClassName(): This method is used to select elements by their class attribute.

        eg: <div class="box">Box 1</div>
            <div class="box">Box 2</div>
            <div class="box">Box 3</div>

            <script>
                // Selecting elements with class 'box'
                let elements = document.getElementsByClassName("box");
                console.log(elements);
            </script>

        Note: It returns a html collection of elements because multiple elements can have the same class.

    3.  getElementsByTagName(): This method is used to select elements by their tag name.
        It returns a html collection of elements because multiple elements can have the same tag.

        eg: <p>This is a paragraph.</p>
            <p>This is another paragraph.</p>

            <script>
                // Selecting all 'p' elements
                let elements = document.getElementsByTagName("p");
                console.log(elements);
            </script>

        Note: It returns a html collection of elements because multiple elements can have the same tag. 

    4.  getElementsByName(): This method is used to select elements by their name attribute.

        eg: <input type="text" name="username" value="John">
            <input type="text" name="username" value="Doe">

            <script>
                // Selecting elements with name 'username'
                let elements = document.getElementsByName("username");
                console.log(elements);
            </script>
        Note: However, it returns a collection of elements because the name attribute is not necessarily unique.

    5. querySelector() and querySelectorAll(): These methods are used to select elements using CSS selectors.

        eg: <div id="container">
                <div class="item">Item 1</div>
                <div class="item">Item 2</div>
                <div class="item">Item 3</div>
            </div>

            <script>
                // Selecting the first element with class 'item' inside #container
                let element = document.querySelector("#container .item");
                console.log(element);

                // Selecting all elements with class 'item' inside #container
                let elements = document.querySelectorAll("#container .item");
                console.log(elements);
            </script>





*** HTMLCollection

    Note: An HTMLCollection is an array-like collection (list) of HTML elements.
    HTMLCollections are often returned by letious DOM (Document Object Model) methods, such as 
    getElementsByTagName, getElementsByClassName, querySelectorAll, getElementsByName() etc.

    
    To access elements within an HTMLCollection, you can use array-like indexing or iteration.
    1. Using Indexing:

        The elements in a collection can be accessed by index (starts at 0).
        Change the size of the second element with class="child":
        For eg :
        <script>
            const element = document.getElementById("myDIV");
            element.getElementsByClassName("child")[1].style.fontSize = 24px";
        </script>

    2. Using Iteration:

        You can iterate through all elements in the HTMLCollection using a loop, such as a for loop or a forEach loop.
        For eg:

        <script>
            let elements = document.getElementsByTagName("div");

            // Using a for loop
            for (let i = 0; i < elements.length; i++) {
                console.log(elements[i]);
            }

            // Using forEach loop (convert HTMLCollection to array first)
            Array.from(elements).forEach(function(element) {
                console.log(element);
            });
        </script>


6. Attribute methods Explaination:

        1. getAttribute() : returns the value of an element's attribute.
        Eg: <div id="myElement" data-info="some data">...</div>
            <script>
                var element = document.getElementById("myElement");
                var dataInfoValue = element.getAttribute("data-info");
                console.log(dataInfoValue); // Output: "some data"
            </script>

        2. setAttribute() :  is a method used to set the value of an attribute on a DOM element.
        It takes two parameters: the name of the attribute and the value to set.
        If the attribute doesn't exist, it will be created; if it already exists, its value will be updated.
        Eg: <button>Hello World</button>
        <script>
            const button = document.querySelector("button");
            button.setAttribute("name", "helloButton");
            button.setAttribute("disabled", "");
        </script>

        Note: Keep in mind that setAttribute() can be used to set any attribute on an HTML element,
        including standard attributes like id, class, src, href, etc., as well as custom attributes.
        However, it's worth noting that manipulating attributes directly with setAttribute() is not always the best approach,
        especially when dealing with certain attributes like class or style,
        where using properties like className or style might be more convenient and safer.

        3. hasAttribute() : allows you to check if a specified element has a certain attribute.
        It returns a boolean value indicating whether the element has the specified attribute or not.
        Eg: 
        <script>
            var element = document.getElementById("myElement");

            if (element.hasAttribute("id")) {
            // The element has the id attribute
            } else {
            // The element does not have the id attribute
            }
        </script>

        4. hasAttributes() : check whether an HTML element has any attributes or not.
        Functionality:
            It takes no arguments.
            It returns a boolean value:
                true: If the element has at least one attribute.
                false: If the element has no attributes.

        This method is useful when you need to determine if an element has any attributes attached to it, such as id, class, href, etc.

        Eg:
        <script>
            // Get a reference to an HTML element
            var element = document.getElementById("myElement");

            // Check if the element has attributes
            if (element.hasAttributes()) {
                console.log("The element has attributes.");
            } else {
                console.log("The element does not have any attributes.");
            }
        </script>

        5. removeAttribute() : used to remove a specified attribute from an HTML element.
        Eg: 